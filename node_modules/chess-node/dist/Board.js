"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Pieces_1 = require("./Pieces");
const Tile_1 = __importDefault(require("./Tile"));
class Board {
    /**
     * @param {number} size the height and width of the square board.
     */
    constructor(size) {
        this.tiles = new Array();
        /**
         * @return size of the board.
         */
        this.getSize = () => this.size;
        /**
         * Determine if a tile is in the board
         * @param {Tile} tile the board of the peice
         */
        this.inBoard = (tile) => !(tile.x > this.size || tile.y > this.size || tile.x < 1 || tile.y < 1);
        this.getPieces = (white, black) => {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
            const pieces = new Array();
            for (let i = 0; i < this.tiles.length; i++) {
                if (white.getPieceByTile(this.tiles[i]) instanceof Pieces_1.Queen &&
                    !((_a = white.getPieceByTile(this.tiles[i])) === null || _a === void 0 ? void 0 : _a.captured)) {
                    pieces.push('wQ');
                }
                else if (white.getPieceByTile(this.tiles[i]) instanceof Pieces_1.King &&
                    !((_b = white.getPieceByTile(this.tiles[i])) === null || _b === void 0 ? void 0 : _b.captured)) {
                    pieces.push('wK');
                }
                else if (white.getPieceByTile(this.tiles[i]) instanceof Pieces_1.Knight &&
                    !((_c = white.getPieceByTile(this.tiles[i])) === null || _c === void 0 ? void 0 : _c.captured)) {
                    pieces.push('wk');
                }
                else if (white.getPieceByTile(this.tiles[i]) instanceof Pieces_1.Rook &&
                    !((_d = white.getPieceByTile(this.tiles[i])) === null || _d === void 0 ? void 0 : _d.captured)) {
                    pieces.push('wR');
                }
                else if (white.getPieceByTile(this.tiles[i]) instanceof Pieces_1.Bishop &&
                    !((_e = white.getPieceByTile(this.tiles[i])) === null || _e === void 0 ? void 0 : _e.captured)) {
                    pieces.push('wB');
                }
                else if (white.getPieceByTile(this.tiles[i]) instanceof Pieces_1.Pawn &&
                    !((_f = white.getPieceByTile(this.tiles[i])) === null || _f === void 0 ? void 0 : _f.captured)) {
                    pieces.push('wP');
                }
                else if (black.getPieceByTile(this.tiles[i]) instanceof Pieces_1.Queen &&
                    !((_g = black.getPieceByTile(this.tiles[i])) === null || _g === void 0 ? void 0 : _g.captured)) {
                    pieces.push('bQ');
                }
                else if (black.getPieceByTile(this.tiles[i]) instanceof Pieces_1.King &&
                    !((_h = black.getPieceByTile(this.tiles[i])) === null || _h === void 0 ? void 0 : _h.captured)) {
                    pieces.push('bK');
                }
                else if (black.getPieceByTile(this.tiles[i]) instanceof Pieces_1.Knight &&
                    !((_j = black.getPieceByTile(this.tiles[i])) === null || _j === void 0 ? void 0 : _j.captured)) {
                    pieces.push('bk');
                }
                else if (black.getPieceByTile(this.tiles[i]) instanceof Pieces_1.Rook &&
                    !((_k = black.getPieceByTile(this.tiles[i])) === null || _k === void 0 ? void 0 : _k.captured)) {
                    pieces.push('bR');
                }
                else if (black.getPieceByTile(this.tiles[i]) instanceof Pieces_1.Bishop &&
                    !((_l = black.getPieceByTile(this.tiles[i])) === null || _l === void 0 ? void 0 : _l.captured)) {
                    pieces.push('bB');
                }
                else if (black.getPieceByTile(this.tiles[i]) instanceof Pieces_1.Pawn &&
                    !((_m = black.getPieceByTile(this.tiles[i])) === null || _m === void 0 ? void 0 : _m.captured)) {
                    pieces.push('bP');
                }
                else
                    pieces.push('  ');
            }
            return pieces;
        };
        this.size = Math.floor(size);
        // populate Tile array with tiles in correct position.
        for (let i = 1; i <= this.size; i++) {
            for (let j = 1; j <= this.size; j++) {
                this.tiles.push(new Tile_1.default(j, i));
            }
        }
    }
    static fromBoard(board) {
        return new this(board.size);
    }
    /**
     * @param {Player} white White player
     * @param {Player} black player
     * @returns {String} the output string
     */
    printBoard(white, black) {
        let boardString = '';
        const pieces = this.getPieces(white, black);
        // building the final string by accessing the location of the piece in the pieces array and placing it in the baord string
        boardString += '`\n    1    2    3    4    5    6    7    8  \n';
        boardString += '  ________________________________________\n';
        boardString += `A | ${pieces[0]} | ${pieces[1]} | ${pieces[2]} | ${pieces[3]} | ${pieces[4]} | ${pieces[5]} | ${pieces[6]} | ${pieces[7]} |\n`;
        boardString += `  |____|____|____|____|____|____|____|____|\n`;
        boardString += `B | ${pieces[8]} | ${pieces[9]} | ${pieces[10]} | ${pieces[11]} | ${pieces[12]} | ${pieces[13]} | ${pieces[14]} | ${pieces[15]} |\n`;
        boardString += '  |____|____|____|____|____|____|____|____|\n';
        boardString += `C | ${pieces[16]} | ${pieces[17]} | ${pieces[18]} | ${pieces[19]} | ${pieces[20]} | ${pieces[21]} | ${pieces[22]} | ${pieces[23]} |\n`;
        boardString += '  |____|____|____|____|____|____|____|____|\n';
        boardString += `D | ${pieces[24]} | ${pieces[25]} | ${pieces[26]} | ${pieces[27]} | ${pieces[28]} | ${pieces[29]} | ${pieces[30]} | ${pieces[31]} |\n`;
        boardString += '  |____|____|____|____|____|____|____|____|\n';
        boardString += `E | ${pieces[32]} | ${pieces[33]} | ${pieces[34]} | ${pieces[35]} | ${pieces[36]} | ${pieces[37]} | ${pieces[38]} | ${pieces[39]} |\n`;
        boardString += '  |____|____|____|____|____|____|____|____|\n';
        boardString += `F | ${pieces[40]} | ${pieces[41]} | ${pieces[42]} | ${pieces[43]} | ${pieces[44]} | ${pieces[45]} | ${pieces[46]} | ${pieces[47]} |\n`;
        boardString += '  |____|____|____|____|____|____|____|____|\n';
        boardString += `G | ${pieces[48]} | ${pieces[49]} | ${pieces[50]} | ${pieces[51]} | ${pieces[52]} | ${pieces[53]} | ${pieces[54]} | ${pieces[55]} |\n`;
        boardString += '  |____|____|____|____|____|____|____|____|\n';
        boardString += `H | ${pieces[56]} | ${pieces[57]} | ${pieces[58]} | ${pieces[59]} | ${pieces[60]} | ${pieces[61]} | ${pieces[62]} | ${pieces[63]} |\n`;
        boardString += '  |____|____|____|____|____|____|____|____|\n`';
        // returns the board string
        return boardString;
    }
}
exports.default = Board;

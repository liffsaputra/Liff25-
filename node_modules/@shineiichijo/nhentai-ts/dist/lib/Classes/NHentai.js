"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NHentai = void 0;
const axios_1 = __importDefault(require("axios"));
const cheerio_1 = require("cheerio");
const Parser_1 = require("../../Parser");
const constants_1 = require("../constants");
class NHentai {
    /**
     * Constructs an instance of the NHentai class
     * @param options Options of the NHentai class
     */
    constructor(options = {
        site: 'https://nhentai.to'
    }) {
        this.options = options;
        /**
         * Gets a random doujin
         * @returns Info of the random doujin
         */
        this.getRandom = () => __awaiter(this, void 0, void 0, function* () {
            return yield axios_1.default
                .get(`${this.options.site}/random`)
                .then(({ data }) => (0, Parser_1.parseDoujinInfo)((0, cheerio_1.load)(data), this.options.site.split('nhentai.')[1]))
                .catch((err) => {
                throw new Error(err.message);
            });
        });
        /**
         * Explores the list of doujin
         * @param page Page number of the list
         * @returns The doujin list
         */
        this.explore = (page = 1) => __awaiter(this, void 0, void 0, function* () {
            if (isNaN(page) || page < 1)
                page = 1;
            return yield axios_1.default
                .get(`${this.options.site}?page=${page}`)
                .then(({ data }) => (0, Parser_1.parseDoujinList)((0, cheerio_1.load)(data), this.options.site.split('nhentai.')[1]))
                .catch((err) => {
                throw new Error(err.message);
            });
        });
        /**
         * Searches for a doujin by a query
         * @param query Query of the doujin to search
         * @param options Options for searching
         * @returns The result of the search
         */
        this.search = (query, options) => __awaiter(this, void 0, void 0, function* () {
            if (!query)
                throw new Error("The 'query' parameter shouldn't be undefined");
            let page = 1;
            if ((options === null || options === void 0 ? void 0 : options.page) && options.page > 0)
                page = options.page;
            return yield axios_1.default
                .get(`${this.options.site}/search?q=${query}&page=${page}`)
                .then((res) => {
                const results = (0, Parser_1.parseDoujinList)((0, cheerio_1.load)(res.data), this.options.site.split('nhentai.')[1]);
                if (!results.data.length)
                    throw new Error('No doujin results found');
                return results;
            });
        });
        /**
         * Gets the info of a doujin by its ID
         * @param id ID of the doujin
         * @returns Info of the doujin
         */
        this.getDoujin = (id) => __awaiter(this, void 0, void 0, function* () {
            if (!id)
                throw new Error("The 'id' parameter shouldn't be undefined");
            const valid = yield this.validate(id);
            if (!valid)
                throw new Error('Invalid doujin ID');
            return yield axios_1.default
                .get(`${this.options.site}/g/${id}`)
                .then((res) => (0, Parser_1.parseDoujinInfo)((0, cheerio_1.load)(res.data), this.options.site.split('nhentai.')[1]))
                .catch((err) => {
                throw new Error(err.message);
            });
        });
        /**
         * Validates the ID of a doujin
         * @param id ID of the doujin to check
         */
        this.validate = (id) => axios_1.default
            .get(`${this.options.site}/g/${id}`)
            .then(() => true)
            .catch(() => false);
        if (!constants_1.sites.includes(this.options.site
            .replace('https:', '')
            .replace(/\//g, '')))
            this.options.site = 'https://nhentai.website';
        if (!this.options.site.startsWith('https://'))
            this.options.site =
                `https://${this.options.site}`;
    }
}
exports.NHentai = NHentai;
